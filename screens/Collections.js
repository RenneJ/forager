import { View, Text, Button, FlatList, ListEmptyComponent } from "react-native";
import { useState, useEffect } from 'react';
import { getDatabase, push, ref, onValue, remove, set } from 'firebase/database';
import { auth, app } from "../firebaseconfig";
import styles from "../styles";
import EmptyCollection from "../components/EmptyCollection";
import CollectionListItem from "../components/CollectionListItem";
import SpotsMap from "../components/SpotsMap";
import { fetchFromCloud } from "../utils/cloudstorage";
const database = getDatabase(app);

export default function Collections() {
	// TODO: if wifi do storeInCloud
	// TODO: list previous trips (sort by time: desc)
	// TODO: "Go Forage" -> Forage
	const [trips, setTrips] = useState([]);
	const [docs, setDocs] = useState({});
	const [mapVisible, setMapVisible] = useState(false);

	useEffect(() => {
		if (auth) {
			try {
				handleFetch();
			} catch (error) {
				console.log("c29", error)
			} finally {
				console.log("c33", trips)
			}
		}
	}, []);

	const handleFetch = () => {
		const itemsRef = ref(database, "/collection/" + auth.currentUser.uid);
			onValue(itemsRef, (snapshot) => {
				const data = snapshot.val();
				if (data) {
					setDocs(data);
				} else {
					setDocs([]);
				}
			});
	}

	// Trips should have unique id, using firebase's autogenerated id
	useEffect(() => {
		let helperList = [];
		try {
			for (const [key, value] of Object.entries(docs)) {
				let trip = { ...value, id: key }
				helperList.push(trip);
			}
		} catch(error){

		} finally{
				setTrips(helperList)
		}
	}, [docs])

	return (
		< View style = { styles.container } >
			{ mapVisible ?
				<SpotsMap />
			:
					<FlatList
						ItemSeparatorComponent={() => <View style={{ height: 5 }} />}
						ListEmptyComponent={ EmptyCollection }
						data={ trips }
						renderItem={({ item }) =>
							<CollectionListItem trip={ item } setMapVisible={ setMapVisible } />
						}
					/>
			}
		</View >
	)
}
